// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
}

enum Role {
  Admin
  Koas
  Pasien

  @@map("roles")
}

enum Gender {
  Male
  Female

  @@map("genders")
}

enum StatusPost {
  Pending
  Open
  Close

  @@map("status-post")
}

enum StatusKoas {
  Rejected
  Pending
  Approved

  @@map("status-koas")
}

model Users {
  id            String          @id @default(uuid())
  firstname     String
  lastname      String
  username      String          @unique @db.VarChar(50) // Batas maksimum 20 karakter
  email         String          @unique
  password      String
  phone         String          @db.VarChar(13) // Batas maksimum 15 karakter
  address       String?
  img           String?
  role          Role
  koasProfile   KoasProfile?
  pasienProfile PasienProfile?
  posts         Posts[]
  notifications Notifications[]
  likes         Likes[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("users")
}

model KoasProfile {
  id           String     @id @default(uuid())
  userId       String     @unique
  koasNumber   String?
  faculty      String?
  bio          String?
  whatsappLink String?
  status       StatusKoas @default(Pending) // enum dapat ditambahkan jika ada daftar nilai yang terbatas
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt

  user  Users   @relation(fields: [userId], references: [id])
  posts Posts[]

  @@map("koas-profile")
}

model PasienProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  age       Int?
  gender    Gender? // enum dapat ditambahkan jika ada daftar nilai yang terbatas
  bio       String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])

  @@map("pasien-profile")
}

model Posts {
  id                 String     @id @default(uuid())
  userId             String
  koasId             String
  treatmentId        String
  title              String
  desc               String
  patientRequirement Json?
  status             StatusPost @default(Pending) // enum dapat ditambahkan jika ada daftar nilai yang terbatas
  published          Boolean    @default(false)
  likes              Likes[]
  createdAt          DateTime   @default(now())
  updateAt           DateTime   @updatedAt

  koas  KoasProfile @relation(fields: [koasId], references: [id])
  users Users       @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
  @@index([koasId], name: "koasId")
  @@index([treatmentId], name: "treatmentId")
  @@map("posts")
}

model Likes {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  user  Users @relation(fields: [userId], references: [id])
  posts Posts @relation(fields: [postId], references: [id])

  @@index([postId], name: "postId")
  @@index([userId], name: "userId")
  @@map("likes")
}

model Notifications {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user Users @relation(fields: [userId], references: [id])

  @@index([userId], name: "userId")
  @@map("notifications")
}

model TreatmentType {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("treatment-types")
}
